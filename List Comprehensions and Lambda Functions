## 1. The JSON Format ##

import json


world_cup_str = """
[
    {
        "team_1": "France",
        "team_2": "Croatia",
        "game_type": "Final",
        "score" : [4, 2]
    },
    {
        "team_1": "Belgium",
        "team_2": "England",
        "game_type": "3rd/4th Playoff",
        "score" : [2, 0]
    }
]
"""

world_cup_obj = json.loads(world_cup_str)

## 2. Reading a JSON file ##

# abrir/importar o modulo json do Python:
import json

# abrir o ficheiro com o metodo open:
j_file = open('hn_2014.json')
# fazer o load do ficheiro usando o metodo json.load():
hn_file = json.load(j_file)

# para percebermos qual o tamanho, i e, qtas rows tem o N/ficheiro usando a função len:
print(len(hn_file))

# para sabermos quais as keys do N/Dataset:
print(hn_file[0].keys())

Jay_file = open('hn_2014.json')
hn = json.load(Jay_file)
                

## 3. Deleting Dictionary Keys ##

#abrir e 'carregar' o ficheiro json hn_2014 e guarda-lo na variável hn_file:
open_file = open('hn_2014.json')
hn_file = json.load(open_file)


def del_key(dict_, key):
    # create a copy so we don't
    # modify the original dict
    modified_dict = dict_.copy()
    del modified_dict[key]
    return modified_dict

def test (obj):
    text = json.dumps(obj, indent=2, sort_keys=True)
    print(text)

jackson_5 = hn_file[0:5]
#test(jackson_5)
jackson_5_f = json.dumps(jackson_5, sort_keys=True, indent=2)  

hn_clean = []
for dic in hn:
    dic = del_key(dic, 'createdAtI')
    hn_clean.append(dic)
        


## 4. Writing List Comprehensions ##

# LOOP VERSION
#
# hn_clean = []
#
# for d in hn:
#     new_d = del_key(d, 'createdAtI')
#     hn_clean.append(new_d)

# LIST COMPREHENSION VERSION:

hn_clean = [del_key(dic, 'createdAtI') for dic in hn]


## 5. Using List Comprehensions to Transform and Create Lists ##

    
urls = [dic['url'] for dic in hn_clean]

## 6. Using List Comprehensions to Reduce a List ##

thousand_points = [dic for dic in hn_clean if dic['points']> 1000]
num_thousand_points = len(thousand_points)

## 7. Passing Functions as Arguments ##

def ncom (dic):
    return dic['numComments']

most_comments = max(hn_clean, key=ncom)

def npoints(dic):
    return dic['points']

most_points = max(hn_clean, key=npoints)

## 8. Lambda Functions ##

# def multiply(a, b):
#    return a * b

multiply = lambda a, b: a * b

## 9. Using Lambda Functions to Analyze JSON data ##


max_points = max(hn_clean, key=lambda dic: dic['points'])

hn_sorted_points = sorted(hn_clean, key=lambda dic: dic['points'], reverse=True)

top_5_titles = [dic['title'] for dic in hn_sorted_points[:5]]

## 10. Reading JSON files into pandas ##

import pandas as pd

hn_df = pd.DataFrame(hn_clean)
hn_tags = hn_df['tags'].head(10)

## 11. Exploring Tags Using the Apply Function ##

tags = hn_df['tags']

# usamos o metodo apply, encadeado com o value_counts, para perceber quais (tipo), e qual o nmr das diferentes classes que povoam a Series tags:
classe = tags.apply(type).value_counts(dropna=False)
# usamos o metodo apply, encadeado com o value_counts, para perceber qual tamanho (len) das diferentes listas q povoam a Series tags:
n_tags = tags.apply(len).value_counts(dropna=False)

four_tags = tags[tags.apply(len)==4]

## 12. Extracting Tags Using Apply with a Lambda Function ##

# def extract_tag(l):
#     return l[-1] if len(l) == 4 else None

cleaned_tags = tags.apply(lambda t: t[-1] if len(t) == 4 else None)

hn_df['tags'] = cleaned_tags
